name: Build & Deploy Backstage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build-and-push-docker:
    runs-on: [ self-hosted, linux, x64, backstage ]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install AWS-CLI
      run: |
        npm install -g aws-cli
    - name: Build And Push Image
      run: |
        export $(echo ${{ secrets.ENV_FILE }} | base64 --decode | xargs)
        npm install -g yarn
        yarn install
        yarn tsc
        yarn build:backend
        docker image build . -f packages/backend/Dockerfile --tag $BACKSTAGE_DOCKER_IMAGE_REPOSITORY/$BACKSTAGE_DOCKER_IMAGE_NAME
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $BACKSTAGE_DOCKER_IMAGE_REPOSITORY

  test-deploy:
    runs-on: [ self-hosted, linux, x64, backstage ]
    needs: build-and-push-docker
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install AWS-CLI
      run: |
        npm install -g yarn aws-cli
    - uses: hashicorp/setup-terraform@v3
    - name: Test TF Template
      run: |
        export $(echo ${{ secrets.ENV_FILE }} | base64 --decode | xargs)
        cd tf && terraform test

  deploy:
    runs-on: [ self-hosted, linux, x64, backstage ]
    needs: test-deploy
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - uses: actions/setup-node@v4
      with:
        node-version: 18
    - name: Install AWS-CLI
      run: |
        npm install -g yarn aws-cli
    - uses: hashicorp/setup-terraform@v3
    - name: Deploy to AWS
      run: |
        export $(echo ${{ secrets.ENV_FILE }} | base64 --decode | xargs)
        cd tf && terraform apply -auto-approve